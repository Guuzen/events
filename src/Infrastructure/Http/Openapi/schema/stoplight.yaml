openapi: 3.0.0
info:
  title: guuzen events
  version: '1.0'
  contact:
    name: Guuzen
  license:
    name: MIT
  description: Test
servers:
  - url: 'http://localhost:8128'
    description: localhost
  - url: 'http://web'
    description: docker
tags:
  - name: admin
  - name: event
  - name: fondy
  - name: order
  - name: promocode
  - name: tariff
  - name: ticket
  - name: ticketOrder
paths:
  /admin/eventDomain:
    post:
      summary: Create event domain
      tags:
        - event
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./idResponse.v1.json
              examples:
                example-1:
                  value:
                    data:
                      id: 5f32426b-9409-498d-a87f-1f630e6bfff9
          headers: {}
      operationId: post-admin-event-create
      description: Create new event
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./eventDomain/createEventDomain.v1.json
        description: New event do not need any data
    parameters: []
    get:
      summary: event domains
      tags:
        - event
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./eventDomain/eventDomain.v1.json
                required:
                  - data
      operationId: get-admin-eventDomain-list
      description: list of event domains
  '/admin/eventDomain/{eventId}':
    get:
      summary: Show event domain
      tags:
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./eventDomain/eventDomain.v1.json
                required:
                  - data
      operationId: get-admin-eventDomain-show
      description: Show event domain
    parameters:
      - schema:
          type: string
          format: uuid
        name: eventId
        required: true
        in: path
        description: ''
  /admin/tariff:
    get:
      summary: tariff list
      tags:
        - tariff
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./tariff/tariff.v1.json
                required:
                  - data
      operationId: get-admin-tariff-list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: eventId
          required: true
      description: get tariff list
    post:
      summary: Create tariff
      operationId: post-admin-tariff-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./idResponse.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./tariff/createTariff.v1.json
        description: ''
      description: creates new tariff
      tags:
        - tariff
        - admin
  '/admin/tariffDescription/{tariffId}':
    get:
      summary: show tariff description
      tags:
        - tariff
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./tariffDescription/tariffDescription.v1.json
                required:
                  - data
      operationId: get-admin-tariffDescription-show
      parameters: []
      description: shows tariff details
    parameters:
      - schema:
          type: string
          format: uuid
        name: tariffId
        in: path
        required: true
  '/admin/tariff/{tariffId}':
    get:
      summary: one tariff
      tags:
        - admin
        - tariff
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./tariff/tariff.v1.json
                required:
                  - data
      operationId: get-admin-tariff-show
      parameters: []
      description: shows tariff
    parameters:
      - schema:
          type: string
          format: uuid
        name: tariffId
        in: path
        required: true
  /ticketOrder/place:
    post:
      summary: place order
      operationId: post-order-place
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./idResponse.v1.json
      tags:
        - admin
        - ticket
      description: places new order for ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./ticketOrder/placeTicketOrder.v1.json
  /admin/order:
    get:
      summary: order list
      tags:
        - order
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./order/order.v1.json
                required:
                  - data
      operationId: get-admin-order-list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: eventId
          required: true
      description: shows order list
    parameters: []
  '/admin/order/{orderId}':
    get:
      summary: one order
      tags:
        - order
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./order/order.v1.json
                required:
                  - data
      operationId: get-admin-order-show
      parameters: []
      description: shows one order
    parameters:
      - schema:
          type: string
          format: uuid
        name: orderId
        in: path
        required: true
  /admin/ticket/list:
    get:
      summary: ticket list
      tags:
        - ticket
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./ticket/ticket.v1.json
      operationId: get-admin-ticket-list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: eventId
          required: true
      description: shows ticket list
  /admin/ticket/show:
    get:
      summary: one ticket
      tags:
        - ticket
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./ticket/ticket.v1.json
      operationId: get-admin-ticket-show
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: ticketId
          required: true
      description: shows one ticket
  '/fondy/ticketOrder/{orderId}/confirmPayment':
    post:
      summary: mark paid by fondy
      operationId: post-fondy-markPaid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./emptyResponse.v1.json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              format: uuid
        description: fondy marks payment as paid
      description: fondy confirms that specific order was paid
      tags:
        - fondy
        - ticketOrder
    parameters:
      - schema:
          type: string
          format: uuid
        name: orderId
        in: path
        required: true
  /admin/promocode/createTariff:
    post:
      summary: create promocode for tariffs
      operationId: post-admin-promocode-createTariff
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./idResponse.v1.json
      description: creates promocode for specific tariffs
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./promocode/createFixedPromocode.v1.json
      tags:
        - admin
        - promocode
  /admin/promocode/list:
    get:
      summary: fixed promocode list
      tags:
        - promocode
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./promocode/fixedPromocode.v1.json
      operationId: get-admin-promocode-list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: eventId
          required: true
      description: shows list of fixed promocodes
  /admin/tariffDescription:
    post:
      summary: create tariff description
      operationId: post-admin-tariffDescription-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./emptyResponse.v1.json
      description: create tariff description
      tags:
        - admin
        - tariff
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./tariffDescription/tariffDescription.v1.json
    parameters: []
  /ticketOrder/applyPromocode:
    post:
      summary: Apply promocode
      operationId: post-ticketOrder-applyPromocode
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./ticketOrder/applyPromocode.json
      description: Applies promocode to ticket order
      tags:
        - ticketOrder
  /admin/ticketOrder/confirmPayment:
    parameters: []
    post:
      summary: Confirm payment
      operationId: post-admin-ticketOrder-orderId-confirmPayment
      responses:
        '200':
          description: OK
      description: Confirm payment manually
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./ticketOrder/confirmPayment.json
        description: ''
      tags:
        - admin
        - ticket
  '/ticketOrder/{orderId}/payByCard':
    parameters:
      - schema:
          type: string
          format: uuid
        name: orderId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-ticketOrder-orderId-payByCard
      responses:
        '200':
          description: OK
      description: start payment by card
      tags:
        - ticketOrder
components:
  schemas: {}
  securitySchemes: {}
